// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2ray.com/core/app/dns/config.proto

package com.v2ray.core.app.dns;

/**
 * Protobuf type {@code v2ray.core.app.dns.Config}
 */
public  final class Config extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:v2ray.core.app.dns.Config)
    ConfigOrBuilder {
  // Use Config.newBuilder() to construct.
  private Config(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Config() {
    nameServers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Config(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              nameServers_ = new java.util.ArrayList<com.v2ray.core.common.net.Endpoint>();
              mutable_bitField0_ |= 0x00000001;
            }
            nameServers_.add(
                input.readMessage(com.v2ray.core.common.net.Endpoint.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              hosts_ = com.google.protobuf.MapField.newMapField(
                  HostsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
            hosts__ = input.readMessage(
                HostsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            hosts_.getMutableMap().put(
                hosts__.getKey(), hosts__.getValue());
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        nameServers_ = java.util.Collections.unmodifiableList(nameServers_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetHosts();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.v2ray.core.app.dns.Config.class, com.v2ray.core.app.dns.Config.Builder.class);
  }

  public static final int NAMESERVERS_FIELD_NUMBER = 1;
  private java.util.List<com.v2ray.core.common.net.Endpoint> nameServers_;
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
   * A special value 'localhost' as a domain address can be set to use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
   */
  public java.util.List<com.v2ray.core.common.net.Endpoint> getNameServersList() {
    return nameServers_;
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
   * A special value 'localhost' as a domain address can be set to use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
   */
  public java.util.List<? extends com.v2ray.core.common.net.EndpointOrBuilder> 
      getNameServersOrBuilderList() {
    return nameServers_;
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
   * A special value 'localhost' as a domain address can be set to use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
   */
  public int getNameServersCount() {
    return nameServers_.size();
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
   * A special value 'localhost' as a domain address can be set to use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
   */
  public com.v2ray.core.common.net.Endpoint getNameServers(int index) {
    return nameServers_.get(index);
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
   * A special value 'localhost' as a domain address can be set to use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
   */
  public com.v2ray.core.common.net.EndpointOrBuilder getNameServersOrBuilder(
      int index) {
    return nameServers_.get(index);
  }

  public static final int HOSTS_FIELD_NUMBER = 2;
  private static final class HostsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.v2ray.core.common.net.IPOrDomain> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.v2ray.core.common.net.IPOrDomain>newDefaultInstance(
                com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.v2ray.core.common.net.IPOrDomain.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.v2ray.core.common.net.IPOrDomain> hosts_;
  private com.google.protobuf.MapField<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
  internalGetHosts() {
    if (hosts_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          HostsDefaultEntryHolder.defaultEntry);
    }
    return hosts_;
  }

  public int getHostsCount() {
    return internalGetHosts().getMap().size();
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
   */

  public boolean containsHosts(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetHosts().getMap().containsKey(key);
  }
  /**
   * Use {@link #getHostsMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHosts() {
    return getHostsMap();
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
   */

  public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHostsMap() {
    return internalGetHosts().getMap();
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
   */

  public com.v2ray.core.common.net.IPOrDomain getHostsOrDefault(
      java.lang.String key,
      com.v2ray.core.common.net.IPOrDomain defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
        internalGetHosts().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
   */

  public com.v2ray.core.common.net.IPOrDomain getHostsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
        internalGetHosts().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < nameServers_.size(); i++) {
      output.writeMessage(1, nameServers_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetHosts(),
        HostsDefaultEntryHolder.defaultEntry,
        2);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < nameServers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, nameServers_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, com.v2ray.core.common.net.IPOrDomain> entry
         : internalGetHosts().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
      hosts__ = HostsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, hosts__);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.v2ray.core.app.dns.Config)) {
      return super.equals(obj);
    }
    com.v2ray.core.app.dns.Config other = (com.v2ray.core.app.dns.Config) obj;

    boolean result = true;
    result = result && getNameServersList()
        .equals(other.getNameServersList());
    result = result && internalGetHosts().equals(
        other.internalGetHosts());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (getNameServersCount() > 0) {
      hash = (37 * hash) + NAMESERVERS_FIELD_NUMBER;
      hash = (53 * hash) + getNameServersList().hashCode();
    }
    if (!internalGetHosts().getMap().isEmpty()) {
      hash = (37 * hash) + HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHosts().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.v2ray.core.app.dns.Config parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.v2ray.core.app.dns.Config prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code v2ray.core.app.dns.Config}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:v2ray.core.app.dns.Config)
      com.v2ray.core.app.dns.ConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetHosts();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableHosts();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.v2ray.core.app.dns.Config.class, com.v2ray.core.app.dns.Config.Builder.class);
    }

    // Construct using com.v2ray.core.app.dns.Config.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getNameServersFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (nameServersBuilder_ == null) {
        nameServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        nameServersBuilder_.clear();
      }
      internalGetMutableHosts().clear();
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_descriptor;
    }

    public com.v2ray.core.app.dns.Config getDefaultInstanceForType() {
      return com.v2ray.core.app.dns.Config.getDefaultInstance();
    }

    public com.v2ray.core.app.dns.Config build() {
      com.v2ray.core.app.dns.Config result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.v2ray.core.app.dns.Config buildPartial() {
      com.v2ray.core.app.dns.Config result = new com.v2ray.core.app.dns.Config(this);
      int from_bitField0_ = bitField0_;
      if (nameServersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          nameServers_ = java.util.Collections.unmodifiableList(nameServers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.nameServers_ = nameServers_;
      } else {
        result.nameServers_ = nameServersBuilder_.build();
      }
      result.hosts_ = internalGetHosts();
      result.hosts_.makeImmutable();
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.v2ray.core.app.dns.Config) {
        return mergeFrom((com.v2ray.core.app.dns.Config)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.v2ray.core.app.dns.Config other) {
      if (other == com.v2ray.core.app.dns.Config.getDefaultInstance()) return this;
      if (nameServersBuilder_ == null) {
        if (!other.nameServers_.isEmpty()) {
          if (nameServers_.isEmpty()) {
            nameServers_ = other.nameServers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNameServersIsMutable();
            nameServers_.addAll(other.nameServers_);
          }
          onChanged();
        }
      } else {
        if (!other.nameServers_.isEmpty()) {
          if (nameServersBuilder_.isEmpty()) {
            nameServersBuilder_.dispose();
            nameServersBuilder_ = null;
            nameServers_ = other.nameServers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            nameServersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNameServersFieldBuilder() : null;
          } else {
            nameServersBuilder_.addAllMessages(other.nameServers_);
          }
        }
      }
      internalGetMutableHosts().mergeFrom(
          other.internalGetHosts());
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.v2ray.core.app.dns.Config parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.v2ray.core.app.dns.Config) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.v2ray.core.common.net.Endpoint> nameServers_ =
      java.util.Collections.emptyList();
    private void ensureNameServersIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        nameServers_ = new java.util.ArrayList<com.v2ray.core.common.net.Endpoint>(nameServers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.common.net.Endpoint, com.v2ray.core.common.net.Endpoint.Builder, com.v2ray.core.common.net.EndpointOrBuilder> nameServersBuilder_;

    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public java.util.List<com.v2ray.core.common.net.Endpoint> getNameServersList() {
      if (nameServersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nameServers_);
      } else {
        return nameServersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public int getNameServersCount() {
      if (nameServersBuilder_ == null) {
        return nameServers_.size();
      } else {
        return nameServersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public com.v2ray.core.common.net.Endpoint getNameServers(int index) {
      if (nameServersBuilder_ == null) {
        return nameServers_.get(index);
      } else {
        return nameServersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder setNameServers(
        int index, com.v2ray.core.common.net.Endpoint value) {
      if (nameServersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServersIsMutable();
        nameServers_.set(index, value);
        onChanged();
      } else {
        nameServersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder setNameServers(
        int index, com.v2ray.core.common.net.Endpoint.Builder builderForValue) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.set(index, builderForValue.build());
        onChanged();
      } else {
        nameServersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder addNameServers(com.v2ray.core.common.net.Endpoint value) {
      if (nameServersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServersIsMutable();
        nameServers_.add(value);
        onChanged();
      } else {
        nameServersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder addNameServers(
        int index, com.v2ray.core.common.net.Endpoint value) {
      if (nameServersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServersIsMutable();
        nameServers_.add(index, value);
        onChanged();
      } else {
        nameServersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder addNameServers(
        com.v2ray.core.common.net.Endpoint.Builder builderForValue) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.add(builderForValue.build());
        onChanged();
      } else {
        nameServersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder addNameServers(
        int index, com.v2ray.core.common.net.Endpoint.Builder builderForValue) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.add(index, builderForValue.build());
        onChanged();
      } else {
        nameServersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder addAllNameServers(
        java.lang.Iterable<? extends com.v2ray.core.common.net.Endpoint> values) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nameServers_);
        onChanged();
      } else {
        nameServersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder clearNameServers() {
      if (nameServersBuilder_ == null) {
        nameServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        nameServersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public Builder removeNameServers(int index) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.remove(index);
        onChanged();
      } else {
        nameServersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public com.v2ray.core.common.net.Endpoint.Builder getNameServersBuilder(
        int index) {
      return getNameServersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public com.v2ray.core.common.net.EndpointOrBuilder getNameServersOrBuilder(
        int index) {
      if (nameServersBuilder_ == null) {
        return nameServers_.get(index);  } else {
        return nameServersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public java.util.List<? extends com.v2ray.core.common.net.EndpointOrBuilder> 
         getNameServersOrBuilderList() {
      if (nameServersBuilder_ != null) {
        return nameServersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nameServers_);
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public com.v2ray.core.common.net.Endpoint.Builder addNameServersBuilder() {
      return getNameServersFieldBuilder().addBuilder(
          com.v2ray.core.common.net.Endpoint.getDefaultInstance());
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public com.v2ray.core.common.net.Endpoint.Builder addNameServersBuilder(
        int index) {
      return getNameServersFieldBuilder().addBuilder(
          index, com.v2ray.core.common.net.Endpoint.getDefaultInstance());
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
     * A special value 'localhost' as a domain address can be set to use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1;</code>
     */
    public java.util.List<com.v2ray.core.common.net.Endpoint.Builder> 
         getNameServersBuilderList() {
      return getNameServersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.common.net.Endpoint, com.v2ray.core.common.net.Endpoint.Builder, com.v2ray.core.common.net.EndpointOrBuilder> 
        getNameServersFieldBuilder() {
      if (nameServersBuilder_ == null) {
        nameServersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.v2ray.core.common.net.Endpoint, com.v2ray.core.common.net.Endpoint.Builder, com.v2ray.core.common.net.EndpointOrBuilder>(
                nameServers_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        nameServers_ = null;
      }
      return nameServersBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.v2ray.core.common.net.IPOrDomain> hosts_;
    private com.google.protobuf.MapField<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
    internalGetHosts() {
      if (hosts_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HostsDefaultEntryHolder.defaultEntry);
      }
      return hosts_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
    internalGetMutableHosts() {
      onChanged();;
      if (hosts_ == null) {
        hosts_ = com.google.protobuf.MapField.newMapField(
            HostsDefaultEntryHolder.defaultEntry);
      }
      if (!hosts_.isMutable()) {
        hosts_ = hosts_.copy();
      }
      return hosts_;
    }

    public int getHostsCount() {
      return internalGetHosts().getMap().size();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */

    public boolean containsHosts(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetHosts().getMap().containsKey(key);
    }
    /**
     * Use {@link #getHostsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHosts() {
      return getHostsMap();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */

    public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHostsMap() {
      return internalGetHosts().getMap();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */

    public com.v2ray.core.common.net.IPOrDomain getHostsOrDefault(
        java.lang.String key,
        com.v2ray.core.common.net.IPOrDomain defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
          internalGetHosts().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */

    public com.v2ray.core.common.net.IPOrDomain getHostsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
          internalGetHosts().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearHosts() {
      getMutableHosts().clear();
      return this;
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */

    public Builder removeHosts(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      getMutableHosts().remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
    getMutableHosts() {
      return internalGetMutableHosts().getMutableMap();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */
    public Builder putHosts(
        java.lang.String key,
        com.v2ray.core.common.net.IPOrDomain value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      getMutableHosts().put(key, value);
      return this;
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2;</code>
     */

    public Builder putAllHosts(
        java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> values) {
      getMutableHosts().putAll(values);
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:v2ray.core.app.dns.Config)
  }

  // @@protoc_insertion_point(class_scope:v2ray.core.app.dns.Config)
  private static final com.v2ray.core.app.dns.Config DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.v2ray.core.app.dns.Config();
  }

  public static com.v2ray.core.app.dns.Config getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Config>
      PARSER = new com.google.protobuf.AbstractParser<Config>() {
    public Config parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new Config(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Config> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Config> getParserForType() {
    return PARSER;
  }

  public com.v2ray.core.app.dns.Config getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

